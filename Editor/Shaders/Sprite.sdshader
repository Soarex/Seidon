~VERTEX SHADER

~BEGIN LAYOUT
Tint : VECTOR3_COLOR
Sprite : TEXTURE
~END LAYOUT

#version 460 core
#extension GL_ARB_bindless_texture : require

layout(location = 0) in vec3 vertexPosition;
layout(location = 3) in vec2 vertexUV;

layout(location = 6) in uint objectId;

out VS_OUT
{
    vec2 uv;
    flat uint objectId;
} vs_out;

layout(std430, binding = 0) buffer transforms
{
    mat4 modelMatrices[];
};

struct CameraData
{
    vec3 position;
    mat4 viewMatrix;
    mat4 projectionMatrix;
};

uniform CameraData camera;

void main()
{
    mat4 modelMatrix = modelMatrices[objectId];

    vs_out.uv = vertexUV;
    vs_out.objectId = objectId;

    gl_Position = camera.projectionMatrix * camera.viewMatrix * modelMatrix * vec4(vertexPosition, 1.0);
}


~FRAGMENT SHADER
#version 460 core
#extension GL_ARB_bindless_texture : require

layout(location = 0) out vec4 fragmentColor;
layout(location = 1) out int entityOutput;

in VS_OUT
{
    vec2 uv;
    flat uint objectId;
} fs_in;

struct Material
{
    vec4 tint;
    sampler2D sprite;
};

layout(std430, binding = 1) buffer materialBuffer
{
    Material materials[];
};

layout(std430, binding = 2) buffer ids
{
    int entityIds[];
};

void main()
{
    vec4 spriteColor = texture(materials[fs_in.objectId].sprite, fs_in.uv);

    if(spriteColor.a < 0.1) discard;

    fragmentColor = spriteColor * materials[fs_in.objectId].tint;
    entityOutput = entityIds[fs_in.objectId];
}
